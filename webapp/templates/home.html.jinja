{% extends "base.html.jinja" %}
{% block title %} - Generator Types{% endblock %}
{% block content %}
  <div id="export-modal"
    class="modal modal-blur fade"
    style="display: none"
    aria-hidden="false"
    tabindex="-1">
    <div class="modal-dialog modal-md modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-body d-flex justify-content-center">
          <em>Loading...</em>
        </div>
      </div>
    </div>
  </div>

  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Generator Types</h1>
    <div class="btn-group">
      <button
      hx-get='/modal/export'
      hx-vals='js:{"data": getGenerators()}'
      hx-target="#export-modal"
      hx-trigger="click"
      data-bs-toggle="modal"
      data-bs-target="#export-modal"
      class="btn btn-primary">Export</button>

      <input id="file-upload" class="d-none" type="file" onchange="readJsonFile(event)" accept=".json, .json5, .hjson" />
      <label for="file-upload" class="btn btn-outline-primary">
        Import
      </label>
    </div>
  </div>
  <div class="list-group">
    {% for entity in entities %}
      <a href="{{ url_for('entity_dashboard', entity_type=entity.name) }}" class="list-group-item list-group-item-action">
        {{ entity.title }}
      </a>
    {% endfor %}
  </div>
{% endblock %}
{% block body_after %}
<script>
  function readJsonFile(event) {
    let files = event.target.files;
    let file = files[0];
    let reader = new FileReader();
    reader.onload = () => {
      let json = Hjson.parse(reader.result);
      let customGenRoot = json["customGen"];

      const types = [{% for entity in entities %}"{{ entity.name }}",{% endfor %}];

      types.forEach(k => {
        // Add v1.0 custom generators to basic generators
        let customGen = customGenRoot[k] ?? {};
        Object.keys(customGen).forEach(modifier => {
          if (!json.hasOwnProperty(k)) json[k] = [];
          let gens = customGen[modifier] ?? [];
          gens.forEach(gen => {
            gen.modifier = modifier;
            json[k].push(gen);
          })
        });

        // Save the generators to the browser data storage
        (json[k] ?? []).forEach(v => {
          localStorage.setItem(`ref-gen:${k}:${crypto.randomUUID()}`, JSON.stringify(v));
        });
      });
    }
    reader.readAsText(file);
  }
</script>
{% endblock %}